//------------------------------------------------
//--- 010 Editor v10.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
LittleEndian();

enum <char> DATA_TYPE {
BI_NULL = 0x00,
BI_INT8 = 0x01,
BI_INT16 = 0x02,
BI_INT32 = 0x03,
BI_INT64 = 0x04,
BI_INT128 = 0x05,
BI_BYTES = 0x06,
BI_OBJECT = 0x07,
BI_VALUE = 0x08,
BI_END = 0xFF,
};

struct DATA_VAL {
    DATA_TYPE type <hidden=true>;
    switch (type) {
        case BI_INT8:
            char int8_val;
            break;
        case BI_INT16:
            short short_val;
            break;
        case BI_INT32:
            int int_val;
            break;
        case BI_INT64:
            int64 long_val;
            break;
        case BI_INT128:
            union UUID {
                char value[16] <format=hex>;
                struct UUID_LONGS {
                    int64 hi <format=hex>;
                    int64 lo <format=hex>;
                } uuid_longs  <open=true>;
            } uuid <open=true>;
            break;
        case BI_VALUE:
            int id;
            break;
        case BI_BYTES:
            uint32 len <hidden=true>;
            char bytes[len];
            break;
    };
};

while (!FEof()) {
    DATA_VAL value <open=true>;
}